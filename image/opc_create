#!/bin/sh

for i in helm docker sed; do 
    if !  which $i >/dev/null ; then
        echo "Error: $i missing"
        exit 1
    fi
done

if [ "X$1" = "X" ] ; then
    echo "Usage: $0 <Project Name> <App Name>"
    exit 1
fi

if [ "X$2" = "X" ] ; then
    echo "Usage: $0 <Project Name> <App Name>"
    exit 1
fi
pname=$1
appname=$2


CREATE_HELM_CHART=${CREATE_HELM_CHART:-1}

CREATE_GITLAB_PROJECT=${CREATE_GITLAB_PROJECT:-1}
GITLAB_STORE_CREDS=${GITLAB_STORE_CREDS:-1}
GITLAB_HOST=${GITLAB_HOST:-""}
GITLAB_USER=${GITLAB_USER:-""}
GITLAB_API_TOKEN=${GITLAB_API_TOKEN:-""}

DJANGO_VER=${DJANGO_VER:-3}
PYTHON_VER=${PYTHON_VER:-3.7}
POSTGRES_VER=${POSTGRES_VER:-11.7.0}
NGINX_VER=${NGINX_VER:-1.15.0}
REDIS_VER=${REDIS_VER:-5.0.7}

# Calculate our gravatar url
GSUM=`echo $pname| md5sum|cut -d " " -f 1`
GURL="https://www.gravatar.com/avatar/$GSUM.png?d=robohash"

# Calculate our Secret
secret=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 54 | head -n 1)

# Make the inital copy of our project
cp -dR /script/template/. /dest/$pname/

# Do all our Global Replacements
cd /dest/$pname
# Project Name
find . -type f -exec sed -i "s#\\\$\\\$PROJECT_NAME\\\$\\\$#$pname#g" {} \;
# App Name
find . -type f -exec sed -i "s#\\\$\\\$APP_NAME\\\$\\\$#$appname#g" {} \;
# Secret Key
find . -type f -exec sed -i "s#\\\$\\\$SECRET_KEY\\\$\\\$#$secret#g" {} \;
# Python Version
find . -type f -exec sed -i "s#\\\$\\\$PYTHON_VER\\\$\\\$#$PYTHON_VER#g" {} \;
# Postgres Version
find . -type f -exec sed -i "s#\\\$\\\$POSTGRES_VER\\\$\\\$#$POSTGRES_VER#g" {} \;
# Nginx Version
find . -type f -exec sed -i "s#\\\$\\\$NGINX_VER\\\$\\\$#$NGINX_VER#g" {} \;
# Redis Version
find . -type f -exec sed -i "s#\\\$\\\$REDIS_VER\\\$\\\$#$REDIS_VER#g" {} \;

# Django Version
find . -type f -exec sed -i "s#\\\$\\\$DJANGO_VER\\\$\\\$#$DJANGO_VER#g" {} \;
if [ "X$DJANGO_VER" = "X1" ]; then
    # Default, do nothing
    echo ""
elif [ "X$DJANGO_VER" = "X2" ]; then
    sed -i "s#^Django.*#Django>=2.2,<3.0#" app/.image_files/requirements.txt
elif [ "X$DJANGO_VER" = "X3" ]; then
    sed -i "s#^Django.*#Django>=3.2,<4.0#" app/.image_files/requirements.txt
elif [ "X$DJANGO_VER" = "X4" ]; then
    sed -i "s#^Django.*#Django>=4.0,<5.0#" app/.image_files/requirements.txt
elif [ "X$DJANGO_VER" = "X5" ]; then
    sed -i "s#^Django.*#Django>=5.0,<6.0#" app/.image_files/requirements.txt
elif [ "X$DJANGO_VER" = "X6" ]; then
    sed -i "s#^Django.*#Django>=6.0,<7.0#" app/.image_files/requirements.txt
else
    sed -i "s#^Django.*#Django=$DJANGO_VER#" app/.image_files/requirements.txt
fi


# Create our django app
docker-compose build ${pname}-app
docker-compose run --no-deps ${pname}-app django-admin.py startproject $pname .
docker-compose stop

# Add a favicon to the Django project
cd /dest/$pname/app/$pname
mkdir static
wget -O static/icon.png "$GURL"
convert static/icon.png static/favicon.ico

# Replace/setup our settings file
cd /dest/$pname/app/$pname
    # Secret key
sed -i "s/SECRET_KEY =.*/SECRET_KEY = os.getenv('SECRET_KEY', 'NOTaSecret')/" settings.py
    # DB Settings
sed -i "s/'ENGINE':.*/'ENGINE': os.getenv('SQL_ENGINE', 'django.db.backends.sqlite3'),/" settings.py
sed -i "s/'NAME': os.path.join(BASE_DIR, 'db.sqlite3'.*/'NAME': os.getenv('SQL_DATABASE', os.path.join(BASE_DIR, 'db.sqlite3')),\n        'USER': os.getenv('SQL_USER', 'user'),\n        'PASSWORD': os.getenv('SQL_PASSWORD', 'password'),\n        'HOST': os.getenv('SQL_HOST', 'localhost'),\n        'PORT': os.getenv('SQL_PORT', '5432'),/" settings.py
    # Statics and Media
sed -i "s/STATIC_URL =.*/STATIC_URL = '\\/staticfiles\\/'/" settings.py
sed -i "s/ALLOWED_HOSTS =.*/ALLOWED_HOSTS = [\'*\']/" settings.py
    # Enable DEBUG environment variable
sed -i "s/DEBUG = .*/DEBUG = os.getenv('DEBUG', False)/" settings.py
    # Enable debug_toolbar app and caches
sed -i "s/INSTALLED_APPS = .*/INSTALLED_APPS = [\n    'debug_toolbar',  # !BUILD-STRIP/" settings.py
sed -i "s/MIDDLEWARE = .*/MIDDLEWARE = [\n    'django.middleware.cache.UpdateCacheMiddleware',\n    'debug_toolbar.middleware.DebugToolbarMiddleware',  # !BUILD-STRIP/" settings.py
sed -i "s/XFrameOptionsMiddleware.*/XFrameOptionsMiddleware',\n    'django.middleware.cache.FetchFromCacheMiddleware',/" settings.py

cat >>settings.py <<__EXTRA_SETTINGS__
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/mediafiles/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')

# Used by django-debug-toolbar
DEBUG_TOOLBAR_CONFIG = {"SHOW_TOOLBAR_CALLBACK": lambda x: True, }  # !BUILD-STRIP

# Used for Django Redis Cache
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'       # Sessions in redis only, Sessions lost on redis down
# SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'  # Sessions in DB, cached by redis
CACHES = {
    "default": {
        "BACKEND": "redis_cache.RedisCache",
        "LOCATION": os.getenv('REDIS_CONNSTR', 'redis://redis:6379/1'),
        "OPTIONS": {
            'PARSER_CLASS': 'redis.connection.HiredisParser',
        },
        "KEY_PREFIX": "testp10_"
    }
}

# Preserve Autofield backwards compatibility
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
__EXTRA_SETTINGS__

    # Url mappings for django toolbar
sed -i "s/import admin.*/import admin\nfrom django.conf.urls import include    # !BUILD-STRIP\nimport debug_toolbar    # !BUILD-STRIP/" urls.py
if [ "X$DJANGO_VER" = "X1" ]; then
    echo "urlpatterns.append(url(r'^__debug__/', include(debug_toolbar.urls)))   # !BUILD-STRIP" >>urls.py
else
    echo "urlpatterns.append(path('__debug__/', include(debug_toolbar.urls)))   # !BUILD-STRIP" >>urls.py
fi

# Enable the Entrypoint file that will run the migrations
cd /dest/$pname/app
sed -i "s/#ENTRYPOINT/ENTRYPOINT/" Dockerfile

# Spin up the 2 containers so we can run the migrations
docker-compose up -d --build db
sleep 10	# Give it a chance to start up and configure
docker-compose run --no-deps ${pname}-app python$PYTHON_VER manage.py migrate --noinput

# Create our app
docker-compose run --no-deps ${pname}-app python$PYTHON_VER manage.py startapp $appname
sed -i "s/INSTALLED_APPS = \[/INSTALLED_APPS = \[\n    '$appname',\n    'django_extensions',/" /dest/$pname/app/$pname/settings.py

# Just incase we missed something (line nginx)
docker-compose stop
docker-compose build

# Rejigger the helm chart
if [ $CREATE_HELM_CHART = 1 ]; then
    cd /dest/$pname/charts
    mv CHART_TEMPLATE $pname
    mv SAMPLE-PROJECT-master.yaml SAMPLE-${pname}-master.yaml
    echo "icon: $GURL">> $pname/Chart.yaml
else
    cd /dest/$pname
    rm -Rf charts
fi

# Create the gitlab project files
if [ $CREATE_GITLAB_PROJECT != 1 ]; then
    cd /dest/$pname
    rm -Rf .flake8 .gitignore .gitlab-ci.yml README.md TODO.md CONTRIBUTING.md CICD_SETUP.md
fi


# Create the gitlab project and do an initial commit
if [ $CREATE_GITLAB_PROJECT = 1 ] && [ "X$GITLAB_HOST" != "X" ] && [ "X$GITLAB_USER" != "X" ] && [ "X$GITLAB_API_TOKEN" != "X" ]; then
    cd /dest/$pname
    curl --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" -X POST "$GITLAB_HOST/api/v4/projects?name=$pname"
    cat >>README.md <<__README__
# $pname  ![pipeline status]($GITLAB_HOST/$GITLAB_USER/$pname/badges/master/pipeline.svg)  ![coverage]($GITLAB_HOST/$GITLAB_USER/$pname/badges/master/coverage.svg?job=django_tests)

This Project was created with opc_django (for better or worse)

## App: $appname

Let me know what this app does!
__README__

    git init
    git remote add origin $GITLAB_HOST/$GITLAB_USER/$pname.git
    git add .
    if [ $GITLAB_STORE_CREDS = 1 ]; then
        git config credential.helper store
    fi
    git commit -m "Initial commit"
    git push -u origin master
    git checkout -b prod
    git push -u origin prod
    git checkout master
    # Add Badges
    curl -X POST --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
   --data "name=pipeline&link_url=$GITLAB_HOST/%25%7Bproject_path%7D/-/commit/%25%7Bcommit_sha%7D/pipelines%3Fref=%25%7Bdefault_branch%7D&image_url=$GITLAB_HOST/%25%7Bproject_path%7D/badges/%25%7Bdefault_branch%7D/pipeline.svg" \
   "$GITLAB_HOST/api/v4/projects/$GITLAB_USER%2F$pname/badges"
    curl -X POST --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
   --data "name=coverage&image_url=$GITLAB_HOST/%25%7Bproject_path%7D/badges/%25%7Bdefault_branch%7D/coverage.svg%3Fjob=django_tests&link_url=$GITLAB_HOST" \
   "$GITLAB_HOST/api/v4/projects/$GITLAB_USER%2F$pname/badges"

fi




