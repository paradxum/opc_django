image: ericschultz/docker-with-bash:20.10.7

services:
  - name: docker:20.10.7-dind
    alias: docker
    command: ["--tls=false"]

stages:
  - lint
  - build
  - test
  - bump-semver
  - tag
  - deploy


variables:
  DOCKER_HOST: tcp://localhost:2375/
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  COMPOSE_VER: 1.24.0
  COMPOSE_HTTP_TIMEOUT: 600
  IMAGES: "app nginx"
  HELM_IMAGE: alpine/helm:3.5.2


before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - "export HELM_USER=$(echo $CI_HELM_AUTH|cut -d : -f 1)"
  - "export HELM_PASS=$(echo $CI_HELM_AUTH|cut -d : -f 2)"
  - if command -v shopt ; then shopt -s expand_aliases; fi
  - alias helm="docker run -v "$PWD/charts":/apps -v "$PWD/helm_config":/root/.config/helm -v "$PWD/helm_cache":/root/.cache/helm -v "$PWD/kube_config/config":/root/.kube/config $HELM_IMAGE"
  - |
    cache_dockerhub_image() {
      image=$1
      cache_image=`echo $1|tr "/" "_"|tr ":" "-"`
      cache_image=$CI_REGISTRY_IMAGE/cache:$cache_image
      docker pull $cache_image || true
      local_digest=`docker images $cache_image --format '{{.ID}}' --no-trunc`
      docker pull $image
      dockerhub_digest=`docker images $1 --format '{{.ID}}' --no-trunc`
      if ! [ "$dockerhub_digest" = "$local_digest" ]; then
        echo "#### Updating Cache ####"
        docker tag $image $cache_image && docker push $cache_image
      else echo "#### Cache Matches - No Update Needed ####"
      fi  
    }
    get_test_image() {
      IMAGE=`echo $1|tr '[:upper:]' '[:lower:]'`
      echo "$CI_REGISTRY_IMAGE/$CI_PROJECT_NAME-$IMAGE:$CI_BUILD_REF_NAME-test"
    }
    get_base_image() {
      IMAGE=`echo $1|tr '[:upper:]' '[:lower:]'`
      echo "$CI_REGISTRY_IMAGE/$CI_PROJECT_NAME-$IMAGE"
    }
    build_test_image() {
      IMAGE=$(get_test_image $1)
      DIR=`echo $1|tr '[:upper:]' '[:lower:]'`
      docker pull $IMAGE || true
      docker build --cache-from $IMAGE -t $IMAGE $DIR/.
      docker push $IMAGE
    }
    add_tag() {
      CURRENT=$1
      NEW=$2
      docker pull $CURRENT
      docker tag $CURRENT $NEW
      docker push $NEW
    }
    setup_helm(){
      cache_dockerhub_image $HELM_IMAGE
      mkdir helm_config
      mkdir kube_config
      echo ${KUBECONFIG} | base64 -d > kube_config/config
      chmod 0600 kube_config/config
      helm repo add stable https://charts.helm.sh/stable
      helm repo add bitnami https://charts.bitnami.com/bitnami
      helm repo update
      helm repo add --username $HELM_USER --password $HELM_PASS deployrepo $CI_HELM_REPO
    }
    get_image_size() {
      docker manifest inspect $1 | docker run -i imega/jq -c '[.layers[].size] | add / 1024 / 1024 | floor'
    }
    check_image_sizes() {
      logFile=$1
      FAIL=0
      for IMG in ${IMAGES};do
        LIMIT=${sizeLimits[default]}
        if [ ${sizeLimits[$IMG]+_} ]; then
          LIMIT=${sizeLimits[$IMG]}
        fi
        II=$(get_test_image $IMG)
        SIZE=$(get_image_size $II)
        echo -e "$SIZE\t$IMG" >>$logFile
        if [ $SIZE -gt $LIMIT ]; then
          echo "$IMG $SIZE > $LIMIT"
          FAIL=1
      fi
      done
      exit $FAIL
    }



python_lint:
  stage: lint
  except:
    - tags
  script:
    - cache_dockerhub_image mvantellingen/python-lint
    - docker run -v "$PWD":/code -v /var/run/docker.sock:/var/run/docker.sock mvantellingen/python-lint flake8 app/


helm_lint:
  stage: lint
  except:
    - tags
  script:
    - setup_helm
    - helm lint $CI_PROJECT_NAME


build_test_images:
  stage: build
  script:
    - find . -type f -exec sed -i -i '/# !BUILD-STRIP/d' {} \;
    - for IMG in ${IMAGES}; do echo Building $IMG; build_test_image $IMG; done


django_tests:
  stage: test
  image: docker/compose:1.24.0
  except:
    - tags
  script:
    - export APP_TEST_IMAGE=$(get_test_image APP)
    - cache_dockerhub_image bitnami/postgresql:$$POSTGRES_VER$$
    - cache_dockerhub_image bitnami/redis:$$REDIS_VER$$
    - docker pull $APP_TEST_IMAGE
    - docker-compose up -d db
    - docker-compose up -d redis
    - "sed -i 's#build: ./app#image: $APP_TEST_IMAGE#' docker-compose.yml"
    - "sed -i '/..app.:/d' docker-compose.yml"
    - docker-compose run -v "$PWD":/report -u 0 ${CI_PROJECT_NAME}-app /bin/sh -c "pip install coverage && python3 manage.py makemigrations && coverage run --source='.' manage.py test && coverage report && coverage xml -o /report/coverage.xml"
  coverage: '/TOTAL.*\s([.\d]+)%/'
  artifacts:
    reports:
      cobertura: coverage.xml


nginx_config_test:
  stage: test
  except:
    - tags
  script:
    - docker pull $(get_test_image NGINX)
    - docker run -e APP_DNS_NAME=localhost $(get_test_image NGINX) /bin/sh -c "nginx -t"


check_image_sizes:
  stage: test
  only:
    - master
  script:
    - "declare -A sizeLimits=([default]=100)"
    - check_image_sizes Image-Sizes.txt
  artifacts:
    paths:
      - Image-Sizes.txt
    expire_in: 1 year


bump_semver:
  stage: bump-semver
  image: ericschultz/gitlab-semantic-versioning:latest
  before_script:
    - "export NPA_USERNAME=$(echo $NPA|cut -d : -f 1)"
    - "export NPA_PASSWORD=$(echo $NPA|cut -d : -f 2)"
  only:
    - prod
  script:
    - python3 /version-update/version-update.py



tag-build:
  stage: tag
  script:
    - for IMG in ${IMAGES}; do echo Tagging $IMG to $CI_BUILD_REF_NAME; add_tag $(get_test_image $IMG) $(get_base_image $IMG):$CI_BUILD_REF_NAME; done

tag-dev-latest:
  stage: tag
  only:
    - master
  script:
    - for IMG in ${IMAGES}; do echo Tagging $IMG to dev-latest; add_tag $(get_test_image $IMG) $(get_base_image $IMG):dev-latest; done

tag-prod-latest:
  stage: tag
  only:
    - prod
  script:
    - for IMG in ${IMAGES}; do echo Tagging $IMG to latest; add_tag $(get_test_image $IMG) $(get_base_image $IMG):latest; done

build_charts:
  stage: tag
  script:
    - setup_helm
    - cd charts/$CI_PROJECT_NAME
    - sed -i "s/SetByCI/$CI_BUILD_REF_NAME/" values.yaml
    - sed -i "s#CI_REGISTRY#$CI_REGISTRY_IMAGE#" values.yaml
    - sed -i "s/SetByCI/$CI_BUILD_REF_NAME/" Chart.yaml
    - cd ..
    - helm dependency build $CI_PROJECT_NAME
    - helm package $CI_PROJECT_NAME
    - CHARTNAME=`ls $CI_PROJECT_NAME*.tgz`
    - apk add --update -t deps curl
    - curl --data-binary "@$CHARTNAME" -u $CI_HELM_AUTH $CI_HELM_REPO_API



deploy-master:
  # This section deploys to a kube cluster with your helm chart. It uses the configuration in charts/<project_name>-master.yaml
  # Note: you have to have the CI/CD variable KUBECONFIG set ... See INITAL_CONFIG.md
  stage: deploy
  only:
    - master
  script:
    - setup_helm
    - cd charts/
    - sed -i "s/SetByCI/$CI_BUILD_REF_NAME/" $CI_PROJECT_NAME/Chart.yaml
    - export DEPLOYVERSION=$(grep "version:" $CI_PROJECT_NAME/Chart.yaml |cut -d " " -f 2)
    - export DEPLOYNAME=$CI_PROJECT_NAME-$CI_BUILD_REF_NAME
    - sed -i "s/CISetDate/`date +%F-%H.%M.%S`/" ${DEPLOYNAME}.yaml
    - export DEPLOYED=$(helm ls --all-namespaces|cut -d ' ' -f 1|grep $DEPLOYNAME|wc -l)
    - export HELM_ARGS="$DEPLOYNAME deployrepo/$CI_PROJECT_NAME -f $DEPLOYNAME.yaml --version=$DEPLOYVERSION --namespace $DEPLOYNAME"
    - if [ ${DEPLOYED} -eq 0 ]; then helm install $HELM_ARGS; else helm upgrade $HELM_ARGS; fi


